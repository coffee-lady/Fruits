local rendercam = require('rendercam.rendercam')
local frequency = 2
local max_x, max_y = window.get_size()
max_x = max_x / 2
max_y = max_y / 2
local min_x = - max_x
local min_y = 0 - max_y * 2
local SPEED = 500
local GRAVITY = 300

print(min_y)

go.property('factory_block', msg.url())

local function init_cube(self, dt)
	math.randomseed(os.time() / math.random())

	local pos = go.get_position()
	pos.x = math.random() * (max_x - min_x) + min_x
	pos.y = min_y

	local cube_id = factory.create(self.factory_block, pos)

	local cube_data = {
		id = cube_id,
		pos = go.get_position(cube_id),
		time = 0,
		angle = math.random() * (math.pi / 2 - math.random()),
		start_x = pos.x
	}
	if pos.x > max_x / 2 then
		cube_data.angle = cube_data.angle + math.pi / 2
	elseif pos.x > min_x / 2 and math.random() > 0.5 then
		cube_data.angle = cube_data.angle + math.pi / 2 - math.random() * 1.3
	end
	self.cubes[#self.cubes + 1] = cube_data
end

local function update_cubes(self, dt)
	for i = 1, #self.cubes do
		local cube = self.cubes[i]
		cube.time = cube.time + dt
		cube.pos.x = SPEED * cube.time * math.cos(cube.angle) + cube.start_x
		cube.pos.y = SPEED * cube.time * math.sin(cube.angle) - GRAVITY * cube.time * cube.time / 2
		go.set_position(cube.pos, cube.id)
	end

	for i = 1, #self.cubes do
		local cube = self.cubes[i]

		if cube and (cube.pos.y < min_y or cube.pos.x > max_x or cube.pos.x < min_x) then
			go.delete(cube.id)
			table.remove(self.cubes, i)
		end
	end
end

function init(self)
	self.timer = 1 / frequency
	self.cubes = {}
		init_cube(self, dt)
end

function update(self, dt)
	self.timer = self.timer - dt
	if self.timer <= 0 then
		self.timer = 1 / frequency
		init_cube(self, dt)
	end
	update_cubes(self, dt)
end
