local rendercam = require('rendercam.rendercam')
local frequency = 2
local MAX_X, MAX_Y = window.get_size()
MAX_X = MAX_X / 2
MAX_Y = MAX_Y / 2
local MIN_X = - MAX_X
local MIN_Y = - MAX_Y
local MAX_ANGLE = math.pi / 2
local MIN_ANGLE = math.pi / 5
local SPEED = 500
local GRAVITY = 300

print(MIN_Y)

go.property('factory_block', msg.url())

local function init_cube(self, dt)
	math.randomseed(os.time() / math.random())

	local pos = go.get_position()
	pos.x = math.random() * (MAX_X - MIN_X) + MIN_X
	pos.y = MIN_Y

	local cube_id = factory.create(self.factory_block, pos)

	local cube_data = {
		id = cube_id,
		pos = go.get_position(cube_id),
		time = 0,
		angle = math.random() * (MAX_ANGLE - MIN_ANGLE) + MIN_ANGLE,
		start_x = pos.x
	}
	if pos.x > MAX_X / 2 then
		cube_data.angle = cube_data.angle + MAX_ANGLE
	elseif pos.x > MIN_X / 2 and math.random() > 0.5 then
		cube_data.angle = cube_data.angle + MAX_ANGLE
	end
	self.cubes[#self.cubes + 1] = cube_data
end

local function update_cubes(self, dt)
	for i = 1, #self.cubes do
		local cube = self.cubes[i]
		cube.time = cube.time + dt
		cube.pos.x = SPEED * cube.time * math.cos(cube.angle) + cube.start_x
		cube.pos.y = SPEED * cube.time * math.sin(cube.angle) - GRAVITY * cube.time * cube.time / 2
		go.set_position(cube.pos, cube.id)
	end

	for i = 1, #self.cubes do
		local cube = self.cubes[i]

		if cube and (cube.pos.y < MIN_Y or cube.pos.x > MAX_X or cube.pos.x < MIN_X) then
			go.delete(cube.id)
			table.remove(self.cubes, i)
		end
	end
end

function init(self)
	self.timer = 1 / frequency
	self.cubes = {}
		init_cube(self, dt)
end

function update(self, dt)
	self.timer = self.timer - dt
	if self.timer <= 0 then
		self.timer = 1 / frequency
		init_cube(self, dt)
	end
	update_cubes(self, dt)
end
