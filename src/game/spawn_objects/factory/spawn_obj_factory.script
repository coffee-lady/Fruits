local config = require('config.app')
local window_service = require('modules.window_service.module_window_service')
local zones_module = require('modules.spawn_objects_zones.module_spawn_objects_zones')

local factory_config = config.spawn_objects.factory
local object_config = config.spawn_objects.object
local pack_config = config.spawn_objects.pack

math.randomseed(os.time())
go.property('factory_block', msg.url())
go.property('spawn_obj_image', '/src/assets/atalses/spawn_objects.atlas')

local function init_object(self, dt)
	local obj = {
		pos = go.get_position(),
	}

	zones_module.random_push(obj)

	obj.id = factory.create(self.factory_block, obj.pos, nil, { anim_to_play = hash(math.random(object_config.sprites_number)) })

	self.objects[#self.objects + 1] = obj
end

local function init_pack(self, dt)
	local min_pack, max_pack = pack_config:get_sizes()
	local size = math.random() * (max_pack - min_pack) + min_pack

	local pack = {}
	for i = 1, size do
		local obj = {
			pos = go.get_position(),
		}

		pack[#pack + 1] = obj
	end
	zones_module.random_push_pack(pack)
	for i = 1, #pack do
		local obj = pack[i]
		obj.id = factory.create(self.factory_block, obj.pos, nil, { anim_to_play = hash(math.random(object_config.sprites_number)) })
		self.objects[#self.objects + 1] = obj
	end
end

local function update_objects(self, dt)
	local min_x, min_y, max_x, max_y = window_service:get_coords()

	for i = 1, #self.objects do
		local obj = self.objects[i]
		obj.pos.x = obj.pos.x + obj.speed_x * dt
		obj.pos.y = obj.pos.y + obj.speed_y * dt
		obj.speed_y = obj.speed_y - factory_config.gravity
		go.set_position(obj.pos, obj.id)
	end

	for i = 1, #self.objects do
		local obj = self.objects[i]

		if obj and (obj.pos.y < min_y or obj.pos.x > max_x or obj.pos.x < min_x) then
			go.delete(obj.id)
			table.remove(self.objects, i)
		end
	end
end

local function set_timer(self)
	local min_interval, max_interval = factory_config:get_interval_bounds()
	self.timer = math.random() * ( max_interval - min_interval ) + min_interval
end

function init(self)
	set_timer(self)
	self.objects = {}
end

function update(self, dt)
	self.timer = self.timer - dt
	if self.timer <= 0 then
		set_timer(self)
		init_pack(self, dt)
	end
	update_objects(self, dt)
end
