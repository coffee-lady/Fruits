local Config = require('src.config.config')
local Constants = require('src.constants.constants')
local Services = require('src.services.services')
local Libs = require('src.libs.libs')

local GuiLib = Libs.gui

local GuiButtonsConf = Config.gui.scenes.game.button_animation

local ScenesService = Services.scenes
local ScenesUrls = Constants.component_urls

local MsgConst = Constants.messages
local ActionsConst = Constants.actions
local PopupConst = Constants.component_urls.popups.game_end
local ComponentsUrls = Constants.component_urls

local TransitionConf = Config.gui.popups.game_end.transition
local ScenesTransitionsService = Services.scenes_transitions

local trans = ScenesTransitionsService.transitions

function init(self)
    msg.post(".", "acquire_input_focus")
    
    local popup_data = ScenesService.get_scene_data(ScenesUrls.popups.game_end.url)
    local current_score_node = gui.get_node(PopupConst.gui_nodes.current_score)
    local best_score_node = gui.get_node(PopupConst.gui_nodes.best_score)

    gui.set_text(current_score_node, 'Your points: ' .. popup_data.score)
    gui.set_text(best_score_node, 'Best score: ' .. popup_data.best_score)

    ScenesTransitionsService.init(self, gui.get_node('root'))

	local duration = TransitionConf.duration
	local delay = TransitionConf.delay

	ScenesTransitionsService.show_in(self, trans.slide_in_bottom, gui.EASING_OUTQUAD, duration, delay)
	ScenesTransitionsService.show_out(self, trans.slide_out_bottom, gui.EASING_OUTQUAD, duration, delay)
	ScenesTransitionsService.back_in(self, trans.slide_in_bottom, gui.EASING_OUTQUAD, duration, delay)
	ScenesTransitionsService.back_out(self, trans.slide_out_bottom, gui.EASING_OUTQUAD, duration, delay)
end

function on_input(self, action_id, action)
    local button_home = gui.get_node(PopupConst.gui_nodes.button_home)
    local button_restart = gui.get_node(PopupConst.gui_nodes.button_restart)


    if action_id == hash(ActionsConst.click) and action.released then
        if gui.pick_node(button_home, action.x, action.y) then
            GuiLib:animate_button_click(button_home, GuiButtonsConf.blackout, GuiButtonsConf.scale, GuiButtonsConf.duration)
            ScenesService.switch_to_scene(ScenesUrls.scenes.start.url)

        elseif gui.pick_node(button_restart, action.x, action.y) then
            GuiLib:animate_button_click(button_restart, GuiButtonsConf.blackout, GuiButtonsConf.scale, GuiButtonsConf.duration)
            ScenesService.switch_to_scene(ScenesUrls.scenes.game.url, nil, true)
        end
    end
end

function on_message(self, message_id, message, sender)
	ScenesTransitionsService.on_message(self, message_id, message, sender)
end

function final(self)
	ScenesTransitionsService.final()
end
